(ns metaprob.examples.search-by-example
  (:require [metaprob.examples.cgpm :refer [cgpm-kl-divergence]]))

(defn rowwise-similarity [cgpm latent-vars row-0 row-1 samples]
  (let [kl-divergence-fn (fn [r0 r1] (cgpm-kl-divergence
                                      cgpm
                                      latent-vars
                                      latent-vars
                                      r0
                                      r1
                                      {}
                                      samples))]
    ;; this is the "symmetrized kl"
    (+ (kl-divergence-fn row-0 row-1)
       (kl-divergence-fn row-1 row-0))))

(defn search
  "Given a model, a vector of maps representing a data table, and
  a (possibly sparse) example row, return a list of `(index, score)`
  tuples, where `index` is the index of a row in the data table and
  `score` is a measure of its similarity to the provided example
  row. The returned vector will be sorted by `score`, most similar
  rows first"
  [cgpm rows example latent-vars samples]

  (->> rows
       (map-indexed
        (fn [i r]
          [i (rowwise-similarity cgpm latent-vars example r samples)]))
       (sort-by second)))


(comment

  (ns search-by-example.example
    (:require [metaprob.examples.search-by-example :refer [search]]
              [metaprob.distributions :refer :all]
              [metaprob.examples.multimixture-dsl :refer :all]
              [clojure.string :as str]
              [metaprob.examples.cgpm :refer [real-type integer-type make-cgpm]]))

  ;; iris model, generated by ulli / faras
  (def generate-crosscat-row
    (multi-mixture
     (view
      {"sepal_width" gaussian
       "petal_width" gaussian
       "name" categorical
       "sepal_length" gaussian
       "petal_length" gaussian}
      (clusters
       0.325162847357 {"sepal_width" [34.179974 3.771946]
                       "petal_width" [2.440002 1.061319]
                       "name" [[0.986639 0.002751 0.002445]]
                       "sepal_length" [50.060013 3.489470]
                       "petal_length" [14.640005 1.717676]}
       0.158811538073 {"sepal_width" [29.400019 2.727630]
                       "petal_width" [14.599998 1.296148]
                       "name" [[0.007976 0.972954 0.005166]]
                       "sepal_length" [63.080017 3.877322]
                       "petal_length" [45.879978 1.986359]}
       0.152157485702 {"sepal_width" [30.666668 2.153812]
                       "petal_width" [21.291676 2.423479]
                       "name" [[0.007944 0.009516 0.968360]]
                       "sepal_length" [65.874985 2.437782]
                       "petal_length" [55.375000 2.429196]}
       0.132195328587 {"sepal_width" [26.380953 2.256758]
                       "petal_width" [11.952375 1.290116]
                       "name" [[0.011187 0.958093 0.017295]]
                       "sepal_length" [56.238064 2.327993]
                       "petal_length" [39.714233 2.762729]}
       0.0922710143592 {"sepal_width" [27.133326 2.124983]
                        "petal_width" [18.266705 2.143722]
                        "name" [[0.005149 0.009685 0.963620]]
                        "sepal_length" [59.133389 3.461565]
                        "petal_length" [49.599995 1.624789]}
       0.0656548048737 {"sepal_width" [31.363638 3.960549]
                        "petal_width" [20.909092 2.108620]
                        "name" [[0.007970 0.016508 0.947206]]
                        "sepal_length" [74.999992 2.558409]
                        "petal_length" [63.454559 3.201247]}
       0.0124223859026 {"sepal_width" [22.999990 2.160242]
                        "petal_width" [10.333331 0.471404]
                        "name" [[0.040683 0.858193 0.044297]]
                        "sepal_length" [50.000000 0.816497]
                        "petal_length" [32.666668 2.054805]}
       0.0613245951451 {"sepal_width" [30.540000 4.321466]
                        "petal_width" [11.986667 7.606126]
                        "name" [[0.333333 0.333333 0.333333]]
                        "sepal_length" [58.433333 8.253013]
                        "petal_length" [37.586667 17.585292]}))))

  ;; util used below...
  (defn make-identity-output-addr-map
    [output-addrs-types]
    (let [output-addrs (keys output-addrs-types)
          trace-addrs  (map clojure.core/name output-addrs)]
      (clojure.core/zipmap output-addrs trace-addrs)))

  ;; CGPMify the model
  (def crosscat-cgpm
    (let [outputs-addrs-types {; Variables in the table.
                               :sepal_length real-type
                               :sepal_width real-type
                               :petal_length real-type
                               :petal_width real-type
                               :name integer-type

                               ;; Exposed latent variables.
                               :cluster-for-sepal_length integer-type
                               :cluster-for-sepal_width integer-type
                               :cluster-for-petal_length integer-type
                               :cluster-for-petal_width integer-type
                               :cluster-for-name integer-type}
          output-addr-map    (make-identity-output-addr-map outputs-addrs-types)
          inputs-addrs-types {}
          input-addr-map     {}]

      (make-cgpm generate-crosscat-row
                 outputs-addrs-types
                 inputs-addrs-types
                 output-addr-map
                 input-addr-map)))

  ;; crosscat latent variables...
  (def latent-variables  #{:cluster-for-sepal_length :cluster-for-petal_length})

  ;; ty https://gist.github.com/curran/a08a1080b88344b0c8a7
  (def rows [{:sepal_length 51
              :sepal_width  35
              :petal_length 14
              :petal_width  2
              :name         0}
             {:sepal_length 49
              :sepal_width  30
              :petal_length 14
              :petal_width  2
              :name         0}
             {:sepal_length 47
              :sepal_width  32
              :petal_length 13
              :petal_width  2
              :name         0}
             {:sepal_length 46
              :sepal_width  31
              :petal_length 15
              :petal_width  2
              :name         0}
             {:sepal_length 70
              :sepal_width  32
              :petal_length 47
              :petal_width  14
              :name         1}
             {:sepal_length 64
              :sepal_width  32
              :petal_length 45
              :petal_width  15
              :name         1}
             {:sepal_length 69
              :sepal_width  31
              :petal_length 49
              :petal_width  15
              :name         1}
             {:sepal_length 55
              :sepal_width  23
              :petal_length 40
              :petal_width  13
              :name         1}
             {:sepal_length 64
              :sepal_width  27
              :petal_length 53
              :petal_width  19
              :name         2}
             {:sepal_length 68
              :sepal_width  27
              :petal_length 53
              :petal_width  21
              :name         2}
             {:sepal_length 57
              :sepal_width  25
              :petal_length 50
              :petal_width  20
              :name         2}
             {:sepal_length 58
              :sepal_width  28
              :petal_length 51
              :petal_width  24
              :name         2}])

  ;; should be name 0
  (def example-0 {:sepal_width  34.179974
                  :petal_width  2.440002
                  :name         0
                  :sepal_length 50.060013
                  :petal_length 14.640005})

  (search crosscat-cgpm rows example-0 latent-variables 10)

  ;; should be name 0
  (def example-1 {:sepal_width  34.179974
                  :petal_length 14.640005})

  (search crosscat-cgpm rows example-1 latent-variables 10)

  ;; should be name 2
  (def example-2 {:sepal_length 62
                  :petal_length 51})

  (search crosscat-cgpm rows example-2 latent-variables 10)

  )
